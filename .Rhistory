)
df$timestamp <- as.POSIXct(df$timestamp, format="%Y-%m-%d %H:%M:%S")
View(df)
# Convert data frame to spatial points data frame
coordinates(df) <- c("longitude", "latitude")
# Convert spatial points data frame to spatiotemporal data frame
df_st <- STFDF(df, time = "timestamp")
View(df)
# Convert spatial points data frame to spatiotemporal data frame
df_st <- STFDF(df, time = df.data$timestamp)
# Convert spatial points data frame to spatiotemporal data frame
df_st <- STFDF(df, time = df@data$timestamp)
# Convert spatial points data frame to spatiotemporal data frame
df_st <- STFDF(df, time = df@data[["timestamp"]])
# Convert spatial points data frame to spatiotemporal data frame
df_st <- STFDF(df, time = df@data[["timestamp"]])
# Convert spatial points data frame to spatiotemporal data frame
df_st <- STFDF(df, time = df@data[["timestamp"]], data=df@coords())
# Convert spatial points data frame to spatiotemporal data frame
df_st <- STFDF(df, time = df@data[["timestamp"]], data=df@coords())
# Convert spatial points data frame to spatiotemporal data frame
df_st <- STFDF(df, time = df@data[["timestamp"]], data=df@data)
# Convert spatial points data frame to spatiotemporal data frame
df_st <- STFDF(df, time = df@data[["timestamp"]], data=df)
df@coords
df@coords.nrs
df@bbox
# Convert spatial points data frame to spatiotemporal data frame
df_st <- STFDF(df, time = df@data[["timestamp"]], data=df@coords)
# Create a data frame with spatial and temporal coordinates
df <- data.frame(
obs = c(1,2,3,4,5),
longitude = c(-8.618643, -8.620326, -8.62215, -8.619728, -8.617117),
latitude = c(41.141412, 41.140605, 41.140362, 41.139844, 41.139659),
timestamp = c("2019-01-01 10:00:00", "2019-01-01 10:05:00", "2019-01-01 10:10:00", "2019-01-01 10:15:00", "2019-01-01 10:20:00")
)
df$timestamp <- as.POSIXct(df$timestamp, format="%Y-%m-%d %H:%M:%S")
df$timestamp <- as.POSIXct(df$timestamp, format="%Y-%m-%d %H:%M:%S")
View(df)
# Convert data frame to spatial points data frame
coordinates(df) <- c("longitude", "latitude")
View(df)
# Convert spatial points data frame to spatiotemporal data frame
df_st <- STFDF(df, time = df@data[["timestamp"]], data=df@coords)
# Convert spatial points data frame to spatiotemporal data frame
df_st <- STFDF(df, time = df@data[["timestamp"]], data=df@data[['obs']])
# Convert spatial points data frame to spatiotemporal data frame
df_st <- STFDF(df, time = df@data[["timestamp"]], data.frame(as.vevot(t(df@data[['obs']]))))
# Convert spatial points data frame to spatiotemporal data frame
df_st <- STFDF(df, time = df@data[["timestamp"]], data.frame(as.vector(t(df@data[['obs']]))))
# Convert spatial points data frame to spatiotemporal data frame
df_st <- STFDF(df, time = df@data[["timestamp"]], data.frame(df@data[['obs']]))
# =======================================================
setwd('/Users/apple/Desktop/CEGE0042_R/CEGE0042_STDM_PROJECT')
data <- read.csv('Data/Utah_Data.csv')
data <- read.csv('Data/Utah_Traffic.csv')
View(data)
setwd("/Users/apple/Desktop/CEGE0042_R/")
temp <- read.csv("Data/Temp_China.csv")
View(data)
setwd("/Users/apple/Desktop/CEGE0042_R/")
temp <- read.csv("Data/Temp_China.csv")
View(temp)
colnames(temp)[4:ncol(temp)] <- as.character(c(1951:2002))
station <- paste("sta",1:nrow(temp),sep="")
temp <- cbind(station,temp)
temp_matrix <- data.matrix(temp[,5: ncol(temp)])
View(temp_matrix)
View(data)
traf_matrix <- data.matrix(data[,1:ncol(data)])
View(traf_matrix)
View(data)
View(traf_matrix)
traf_matrix <- data.matrix(data[,1:ncol(data)], row.names=NULl)
# =======================================================
# load data
# =======================================================
setwd('/Users/apple/Desktop/CEGE0042_R/CEGE0042_STDM_PROJECT')
data <- read.csv('Data/Utah_Traffic.csv')
traf_matrix <- data.matrix(data[,1:ncol(data)], row.names=NULl)
traf_matrix <- data.matrix(data[,1:ncol(data)], row.names=NULL)
traf_matrix <- data.matrix(data[,1:ncol(data)], rownames.force=FALSE)
View(traf_matrix)
View(traf_matrix)
setwd("/Users/apple/Desktop/CEGE0042_R/")
temp <- read.csv("Data/Temp_China.csv")
View(temp)
colnames(temp)[4:ncol(temp)] <- as.character(c(1951:2002))
setwd("/Users/apple/Desktop/CEGE0042_R/")
temp <- read.csv("Data/Temp_China.csv")
temp <- read.csv("Data/Temp_China.csv")
station <- paste("sta",1:nrow(temp),sep="")
temp <- cbind(station,temp)
temp_matrix <- data.matrix(temp[,5: ncol(temp)])
View(temp_matrix)
# =======================================================
# load data
# =======================================================
setwd('/Users/apple/Desktop/CEGE0042_R/CEGE0042_STDM_PROJECT')
data <- read.csv('Data/Utah_Traffic.csv')
traf_matrix <- data.matrix(data[,1:ncol(data)], rownames.force=FALSE)
View(traf_matrix)
traf_matrix$X
traf_matrix['X']
traf_matrix[['X']]
traf_matrix <- traf_matrix[, 2:]
traf_matrix <- traf_matrix[, 2:ncol(traf_matrix)]
View(traf_matrix)
is.null(traf_matrix)
traf_matrix[is.null(traf_matrix)]
is.null(data)
View(data)
setwd('/Users/apple/Desktop/CEGE0042_R/CEGE0042_STDM_PROJECT')
data <- read.csv('Data/Utah_Traffic.csv')
traf_matrix <- data.matrix(data[,2:ncol(data)])
View(traf_matrix)
is.na(traf_matrix)
traf_matrix(is.na(traf_matrix))=0
traf_matrix[is.na(traf_matrix)]<-0
mu = mean(traf_matrix)
mu
print('the mean traffic amount across all stations is', mu)
print('the mean traffic amount across all stations is'+ mu)
print('the mean traffic amount across all stations is')
print(paste0('the mean traffic amount across all stations is',mu))
print(paste0('the mean traffic amount across all stations is', mu))
sdev = sd(traf_matrix)
print(paste0('the std of traffic amount across all stations is', sdev))
sdev = sd(traf_matrix)
print(paste0('the std of traffic amount across all stations is', sdev))
hist(traf_matrix)
abline(v=mu, col='red')
# plotting distribution
hist(traf_matrix.T)
# plotting distribution
hist(t(traf_matrix))
# plotting distribution
hist(t(traf_matrix))
abline(v=mu, col='red')
t(traf_matrix)
# plotting distribution
traf_matrix = t(traf_matrix)
View(traf_matrix)
hist(traf_matrix)
abline(v=mu, col='red')
traf_matrix = t(traf_matrix)
View(traf_matrix)
# load data
# =======================================================
setwd('/Users/apple/Desktop/CEGE0042_R/CEGE0042_STDM_PROJECT')
data <- read.csv('Data/Utah_Traffic.csv')
View(data)
setwd("/Users/apple/Desktop/CEGE0042_R/")
temp <- read.csv("Data/Temp_China.csv")
View(temp)
row.names(data) <- data$X
View(data)
# =======================================================
# load data
# =======================================================
setwd('/Users/apple/Desktop/CEGE0042_R/CEGE0042_STDM_PROJECT')
df <- read.csv('Data/Utah_Traffic.csv')
row.names(df) <- df$X
View(df)
df$X <- NULL
names(df) <- substring(names(df),2)
View(df)
# making dataframe into matrix for calculation
traf_matrix <- as.matrix(df)
View(traf_matrix)
View(traf_matrix)
=
# transpose df
df <- t(df)
View(df)
# =======================================================
# load data
# =======================================================
setwd('/Users/apple/Desktop/CEGE0042_R/CEGE0042_STDM_PROJECT')
df <- read.csv('Data/Utah_Traffic.csv')
# setting the first col(time) as indexes
row.names(df) <- df$X
df$X <- NULL
names(df) <- substring(names(df),2)
# transpose df
df <- t(df)
# making dataframe into matrix for calculation
traf_matrix <- as.matrix(df)
# replace the NaN data as )
traf_matrix[is.na(traf_matrix)]<-0
View(df)
View(traf_matrix)
# =======================================================
# load data
# =======================================================
setwd('/Users/apple/Desktop/CEGE0042_R/CEGE0042_STDM_PROJECT')
df <- read.csv('Data/Utah_Traffic.csv')
# setting the first col(time) as indexes
row.names(df) <- df$X
df$X <- NULL
names(df) <- substring(names(df),2)
# transpose df
df <- data.frame(t(df))
View(df)
# making dataframe into matrix for calculation
traf_matrix <- as.matrix(df)
# replace the NaN data as )
traf_matrix[is.na(traf_matrix)]<-0
View(traf_matrix)
# =======================================================
# load data
# =======================================================
setwd('/Users/apple/Desktop/CEGE0042_R/CEGE0042_STDM_PROJECT')
df <- read.csv('Data/Utah_Traffic.csv')
# setting the first col(time) as indexes
row.names(df) <- df$X
df$X <- NULL
names(df) <- substring(names(df),2)
# transpose df
df <- t(df)
View(df)
# making dataframe into matrix for calculation
traf_matrix <- as.matrix(df)
# replace the NaN data as )
traf_matrix[is.na(traf_matrix)]<-0
View(traf_matrix)
class(df)
class(traf_matrix)
# replace the NaN data as )
traf_matrix[is.na(traf_matrix)]<-0
# =======================================================
# non-spatial EDA
# =======================================================
# getting mean and std of data
mu = mean(traf_matrix)
print(paste0('the mean traffic amount across all stations is', mu))
sdev = sd(traf_matrix)
print(paste0('the std of traffic amount across all stations is', sdev))
# plotting distribution
traf_matrix = t(traf_matrix)
hist(traf_matrix)
abline(v=mu, col='red')
# examining the distribution i QQ plot
library(ggplot2)
library(ggplot2)
qqnorm(traf_matrix)
qqline(temp_matrix, col='red')
qqline(traf_matrix, col='red')
setwd('/Users/apple/Desktop/CEGE0042_R/CEGE0042_STDM_PROJECT')
df <- read.csv('Data/Utah_Traffic.csv')
# setting the first col(time) as indexes
row.names(df) <- df$X
df$X <- NULL
df_meta <- read.csv('Data/Utah_Traffic_Meta.csv')
View(df_meta)
setwd('/Users/apple/Desktop/CEGE0042_R/CEGE0042_STDM_PROJECT')
df <- read.csv('Data/Utah_Traffic.csv')
df_meta <- read.csv('Data/Utah_Traffic_Meta.csv')
# setting the first col(time) as indexes
row.names(df) <- df$X
df$X <- NULL
names(df) <- substring(names(df),3)
View(df)
# transpose df and make it into matrix
traf_matrix <- t(df)
View(traf_matrix)
# adding lat and long to traf_matrix
long <- df_meta$longitude[row(traf_matrix) == df_meta$station_id]
lat <- df_meta$latitude[row(traf_matrix) == df_meta$station_id]
route <- df_meta$route[row(traf_matrix) == df_meta$station_id]
traf_matrix <- cbind(traf_matrix, long, lat)
View(traf_matrix)
traf_matrix <- cbind(long, lat, route, traf_matrix)
View(traf_matrix)
setwd('/Users/apple/Desktop/CEGE0042_R/CEGE0042_STDM_PROJECT')
df <- read.csv('Data/Utah_Traffic.csv')
df_meta <- read.csv('Data/Utah_Traffic_Meta.csv')
# setting the first col(time) as indexes
row.names(df) <- df$X
df$X <- NULL
names(df) <- substring(names(df),3)
# transpose df and make it into matrix
traf_matrix <- t(df)
# replace the NaN data as )
traf_matrix[is.na(traf_matrix)]<-0
View(df_meta)
# adding lat and long to traf_matrix
long <- df_meta$longitude[row(traf_matrix) == df_meta$station_id]
lat <- df_meta$latitude[row(traf_matrix) == df_meta$station_id]
row(traf_matrix)
df_meta$station_id
rownames(traf_matrix)
# adding lat and long to traf_matrix
station <- as.numeric(rownames(traf_matrix))
long <- df_meta$longitude[station == df_meta$station_id]
lat <- df_meta$latitude[station == df_meta$station_id]
route <- df_meta$route[station == df_meta$station_id]
traf_matrix <- cbind(long, lat, route, traf_matrix)
View(traf_matrix)
# =======================================================
# non-spatial EDA
# =======================================================
# getting mean and std of data
mu = mean(traf_matrix)
print(paste0('the mean traffic amount across all stations is', mu))
sdev = sd(traf_matrix)
# =======================================================
# save the cleaned data
# =======================================================
write.csv(traf_matrix, file='C_Utah_Traffic.csv')
# =======================================================
# load the cleaned data
# =======================================================
df <- read.csv('Data/C_Utah_Traffic.csv')
# =======================================================
# save the cleaned data
# =======================================================
write.csv(traf_matrix, file='Data/C_Utah_Traffic.csv')
# =======================================================
# load the cleaned data
# =======================================================
df <- read.csv('Data/C_Utah_Traffic.csv')
traf_matrix <- df.matrix(df[, 4:ncol(df)])
traf_matrix <- data.matrix(df[, 4:ncol(df)])
traf_matrix <- as.matrix(df[, 4:ncol(df)])
View(traf_matrix)
View(df_meta)
View(df)
View(traf_matrix)
View(df)
traf_matrix <- as.matrix(df[, 5:ncol(df)])
View(traf_matrix)
names(df) <- substring(names(df),2)
View(df)
# =======================================================
# load the cleaned data
# =======================================================
df <- read.csv('Data/C_Utah_Traffic.csv')
View(df)
names(traf_matrix) <- substring(names(traf_matrix),2)
View(traf_matrix)
names(traf_matrix)
colnames(df)[5:ncol(df)] <- substring(colnames(df)[5:ncol(df)], 2)
View(df)
traf_matrix <- as.matrix(df[, 5:ncol(df)])
View(traf_matrix)
# =======================================================
# non-spatial EDA
# =======================================================
# getting mean and std of data
mu = mean(traf_matrix)
print(paste0('the mean traffic amount across all stations is', mu))
sdev = sd(traf_matrix)
print(paste0('the std of traffic amount across all stations is', sdev))
# plotting distribution
traf_matrix = t(traf_matrix)
hist(traf_matrix)
abline(v=mu, col='red')
# examining the distribution i QQ plot
library(ggplot2)
qqnorm(traf_matrix)
qqline(traf_matrix, col='red')
# looking at data at spatial and temporal scales
# matrix of scatterplots showing the relationship between mean tf per station
pairs(~)
View(df)
pairs(~long+lat+rowMeans(traf_matrix),
main="Simple Scatterplot Matrix on traffic flow")
setwd("/Users/apple/Desktop/CEGE0042_R/")
temp <- read.csv("Data/Temp_China.csv")
colnames(temp)[4:ncol(temp)] <- as.character(c(1951:2002))
station <- paste("sta",1:nrow(temp),sep="")
temp <- cbind(station,temp)
temp_matrix <- data.matrix(temp[,5: ncol(temp)])
# 1.2 examining non spatio-temporal data char
mu = mean(temp_matrix)
sdev = sd(temp_matrix)
mu
sdev
hist(temp_matrix)
abline(v=mu, col="red")
qqnorm(temp_matrix)
qqline(temp_matrix, col="red")
View(temp)
pairs(~LOG+LAT+ALT+rowMeans(temp_matrix), data=temp, main="Simple Scatterplot Matrix")
View(temp_matrix)
View(traf_matrix)
View(temp_matrix)
# =======================================================
# load data
# =======================================================
setwd('/Users/apple/Desktop/CEGE0042_R/CEGE0042_STDM_PROJECT')
df <- read.csv('Data/Utah_Traffic.csv')
df_meta <- read.csv('Data/Utah_Traffic_Meta.csv')
# setting the first col(time) as indexes
row.names(df) <- df$X
df$X <- NULL
names(df) <- substring(names(df),3)
# transpose df and make it into matrix
traf_matrix <- t(df)
# replace the NaN data as )
traf_matrix[is.na(traf_matrix)]<-0
# adding lat and long to traf_matrix
station <- as.numeric(rownames(traf_matrix))
long <- df_meta$longitude[station == df_meta$station_id]
lat <- df_meta$latitude[station == df_meta$station_id]
route <- df_meta$route[station == df_meta$station_id]
traf_matrix <- cbind(long, lat, route, traf_matrix)
# =======================================================
# save the cleaned data
# =======================================================
write.csv(traf_matrix, file='Data/C_Utah_Traffic.csv')
# =======================================================
# load the cleaned data
# =======================================================
df <- read.csv('Data/C_Utah_Traffic.csv')
colnames(df)[5:ncol(df)] <- substring(colnames(df)[5:ncol(df)], 2)
traf_matrix <- as.matrix(df[, 5:ncol(df)])
# =======================================================
# non-spatial EDA
# =======================================================
# getting mean and std of data
mu = mean(traf_matrix)
print(paste0('the mean traffic amount across all stations is', mu))
sdev = sd(traf_matrix)
print(paste0('the std of traffic amount across all stations is', sdev))
# plotting distribution
hist(traf_matrix)
abline(v=mu, col='red')
# data are not normall distributed, but highly positively skewed
# examining the distribution i QQ plot
library(ggplot2)
qqnorm(traf_matrix)
qqline(traf_matrix, col='red')
# explanations to this might be: a lot of stations have low traffic values
# so there can be spatial trend in data.
# e.g. city centres there can be more traffic flow
# e.g. low traffic flow during night time
pairs(~long+lat+rowMeans(traf_matrix),
main="Simple Scatterplot Matrix on traffic flow")
# explore further by 3D plotting
library(scatterplot3d)
library(plot3D)
library(rgl)
#1. Using Scatterplot3d
scatterplot3d(x=df$long, y=df$lat, z=rowMeans(traf_matrix))
#2. Using plot3D (x,y and z are first three variables so no need to # explicitly define them).
scatter3D(x=df$long, y=df$lat, z=rowMeans(traf_matrix))
# Need to see if this can be interactive in web-version
plot3d(x=df$long, y=df$lat, z=rowMeans(traf_matrix))
# =======================================================
# explore temporal aspects
# =======================================================
plot(colMeans(traf_matrix), xlab = "Timeline", ylab = "Traffic", type="l", xaxt="n")
timestamp <- seq(as.POSIXct("2022.01.00.00.00"), as.POSIXct("2022.01.31.23.00", by="1 day"))
timestamp <- seq(as.POSIXct("2022-01-01 00:00:00"), as.POSIXct("2022-01-31 23:00:00", by="1 day"))
x_labels <- seq(as.POSIXct("2022-01-01 00:00:00"), as.POSIXct("2022-01-31 23:00:00", by="1 day"))
x_labels <- seq(as.POSIXct("2022-01-01 00:00:00"), as.POSIXct("2022-01-31 23:00:00", by="1 day"))
x_labels <- seq(as.POSIXct("2022-01-01 00:00:00"), as.POSIXct("2022-01-31 23:00:00", by="day"))
x_labels <- seq(as.POSIXct("2022-01-01 00:00:00"), as.POSIXct("2022-01-31 23:00:00"), by='1 day')
x_ticks <- seq(0,49,10)
plot(x = 1:50, y = colMeans(traf_matrix) , type = "l", xaxt = "n")
# =======================================================
# explore temporal aspects
# =======================================================
plot(colMeans(traf_matrix), xlab = "Timeline", ylab = "Traffic", type="l", xaxt="n")
x_labels <- seq(as.POSIXct("2022-01-01 00:00:00"), as.POSIXct("2022-01-31 23:00:00"), by='1 day')
x_ticks <- seq(0,49,10)
axis(1, at = x_ticks, labels=x_labels)
x_ticks <- seq(0,30,1)
axis(1, at = x_ticks, labels=x_labels)
x_labels
x_ticks <- seq(0,300,10)
axis(1, at = x_ticks, labels=x_labels)
# =======================================================
# explore temporal aspects
# =======================================================
plot(colMeans(traf_matrix), xlab = "Timeline", ylab = "Traffic", type="l", xaxt="n")
x_labels <- seq(as.POSIXct("2022-01-01 00:00:00"), as.POSIXct("2022-01-31 23:00:00"), by='1 day')
x_ticks <- seq(0,300,10)
axis(1, at = x_ticks, labels=x_labels)
x_ticks <- seq(0,3000,100)
# =======================================================
# explore temporal aspects
# =======================================================
plot(colMeans(traf_matrix), xlab = "Timeline", ylab = "Traffic", type="l", xaxt="n")
x_labels <- seq(as.POSIXct("2022-01-01 00:00:00"), as.POSIXct("2022-01-31 23:00:00"), by='1 day')
x_ticks <- seq(0,3000,100)
x_ticks <- seq(0,900,30)
# =======================================================
# explore temporal aspects
# =======================================================
plot(colMeans(traf_matrix), xlab = "Timeline", ylab = "Traffic", type="l", xaxt="n")
x_labels <- seq(as.POSIXct("2022-01-01 00:00:00"), as.POSIXct("2022-01-31 23:00:00"), by='1 day')
x_ticks <- seq(0,900,30)
axis(1, at = x_ticks, labels=x_labels)
x_ticks <- seq(0,600,20)
axis(1, at = x_ticks, labels=x_labels)
# =======================================================
# explore temporal aspects
# =======================================================
plot(colMeans(traf_matrix), xlab = "Timeline", ylab = "Traffic", type="l", xaxt="n")
x_labels <- seq(as.POSIXct("2022-01-01 00:00:00"), as.POSIXct("2022-01-31 23:00:00"), by='1 day')
x_ticks <- seq(0,600,20)
axis(1, at = x_ticks, labels=x_labels)
# =======================================================
# explore temporal aspects
# =======================================================
plot(colMeans(traf_matrix), xlab = "Timeline", ylab = "Traffic", type="l", xaxt="n")
x_labels <- seq(as.POSIXct("2022-01-01 00:00:00"), as.POSIXct("2022-01-31 23:00:00"), by='1 day')
x_ticks <- seq(0,750,25)
axis(1, at = x_ticks, labels=x_labels)
