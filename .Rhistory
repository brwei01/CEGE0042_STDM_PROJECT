library(ggplot2)
library(gridExtra)
library(gstat)
library(OpenStreetMap)
library(spacetime)
# =======================================================
# load data
# =======================================================
current_directory <- getwd()
setwd(current_directory)
df <- read.csv('Data/C_Utah_Traffic.csv')
traf_matrix <- data.matrix(df[,5:ncol(df)])
rownames(traf_matrix) <- df$X
plot(traf_matrix["615",],
ylab="hourly traffic flow",
xlab="Time (in hours)",
type='l')
plot(traf_matrix["354",],
ylab="hourly traffic flow",
xlab="Time (in hours)",
type='l')
# lag plots
lag.plot(traf_matrix['354',], lags=3, do.lines = FALSE)
# lag plots
lag.plot(traf_matrix['354',], lags=6, do.lines = FALSE)
# Autocorrelation analysis
acf(traf_matrix["615",],
lag.max=48,
xlab="Lag",
ylab="ACF",
main="Autocorrelation plot of hourly traffic flow")
# Autocorrelation analysis
acf(traf_matrix["354",],
lag.max=48,
xlab="Lag",
ylab="ACF",
main="Autocorrelation plot of hourly traffic flow")
# differenced auto correlation
EA.s.diff <- diff(traf_matrix["354",], lag=24, differences=1)
acf(EA.s.diff,
lag.max=48,
xlab="Lag",
ylab="ACF",
main="Differenced (1) autocorrelation plot")
# PACF
pacf(traf_matrix["615",],
lag.max=48,
xlab="Lag",
ylab="PACF",
main="Partial Autocorrelation plot of hourly traffic flow")
pacf(EA.s.diff,
lag.max=48,
xlab="Lag",
ylab="ACF",
main="Partial Autocorrelation plot of hourly average traffic")
#Parameter estimation and fitting
n_train <- ncol(traf_matrix) * 0.7
fit.ar <- arima(traf_matrix["615",1:n_train],order=c(1,0,2),seasonal=list(order=c(1,1,0),period=24))
fit.ar
# PACF
pacf(traf_matrix["354",],
lag.max=48,
xlab="Lag",
ylab="PACF",
main="Partial Autocorrelation plot of hourly traffic flow")
fit.ar <- arima(traf_matrix["354",1:n_train],order=c(1,0,2),seasonal=list(order=c(1,1,0),period=24))
fit.ar
tsdiag(fit.ar)
pre.ar<-predict(fit.ar, n.ahead=48)
matplot(521:568,cbind(traf_matrix["615",521:568],pre.ar$pred),type="l",main="", xlab="Hour", ylab="Average traffic flow")
matplot(521:568,cbind(traf_matrix["354",521:568],pre.ar$pred),type="l",main="", xlab="Hour", ylab="Average traffic flow")
# ==========================================================================================
# parameter tuning
# ==========================================================================================
library('tidyverse')
library('tseries')
library('forecast')
fit.Ar <- Arima(traf_matrix["615",1:n_train],order=c(1,0,2),seasonal=list(order=c(2,1,1),period=24))
fit.Ar <- Arima(traf_matrix["354",1:n_train],order=c(1,0,2),seasonal=list(order=c(2,1,1),period=24))
pre.Ar <- Arima(traf_matrix["354",n_train:(ncol(traf_matrix))],model=fit.Ar)
matplot(cbind(pre.Ar$fitted, pre.Ar$x), type="l")
moran.test(x=traf_avg, listw=W)
library(maptools)
library(lattice)
library(spdep)
library(sp)
library(rgdal)
library(tmap)
library(ggplot2)
library(gridExtra)
library(gstat)
library(OpenStreetMap)
library(spacetime)
library(tmap)
current_directory <- getwd()
setwd(current_directory)
df <- read.csv('Data/C_Utah_Traffic.csv')
stations <- tm_shape(stations)
traf_matrix <- data.matrix(df[,5:ncol(df)])
# ==============================================================
# TEMPORAL AUTO CORRELATION
# ==============================================================
# examine the lagged variables
meanTraf <- colMeans(df[,5:(ncol(df))])
hours <- seq(from = as.POSIXct("2022-01-01 00:00"),
to = as.POSIXct("2022-01-31 22:00"),
by = "hour")
# hours_label <- as.character(hours)
# hours_label <- substr(hours_label, start=6, stop=13)
TrafLagged <- data.frame(hours, t=meanTraf[2:(length(meanTraf))], t_minus_1=meanTraf[1:(length(meanTraf)-1)])
p1 <- ggplot(TrafLagged, aes(x=hours, y=t)) + geom_line()
p2 <- ggplot(TrafLagged, aes(x=t, y=t_minus_1)) +
geom_point() +
labs(y="t-1") +
geom_smooth(method="lm")+ # Add a regression line to the plot
ggplot2::annotate("text", 8.5, 10, label=paste("r =", round(cor(TrafLagged$t, TrafLagged$t_minus_1), 3))) # Calculate PMCC
grid.arrange(p1,p2, nrow=1)
# ==============================================================
# calculate over higher lags -- plot an ACF
# ==============================================================
acf(meanTraf, lag.max = 48)
# the smaller the lag, the greater the correlation
# however negative correlation during night-time
acf(traf_matrix[1,], lag.max=48, main="ACF, station no.354")
# An ACF plot is generated automatscally when the function is run. 95% confidence intervals are placed on the plot.
# plot seasonal (daily) patterns
acf(colMeans(matrix(traf_matrix[1,],24)), main="ACF, station no.354 daily average")
# obvious week pattern shown on graph --- cyclic 7 bars
# ==============================================================
# Partial Correlation Functions: plot a PACF
# ==============================================================
pacf(traf_matrix[1,], lag.max=48, main="PACF, station no.354")
# ==============================================================
# SPATIAL AUTO CORRELATION
# ==============================================================
# load weight matrix
W <- read.table(file='Data/WD_Utah_Traffic.csv',header=TRUE, sep=',')
W$X = NULL
W <- as.matrix(W)
W <- mat2listw(W)
# ==============================================================
# global moran -- averaging temperature over locations
traf_avg <- rowMeans(traf_matrix)
moran.test(x=traf_avg, listw=W)
# monte-carlo simulation of moran I
moran.mc(traf_avg, listw=W, nsim=9999)
# ==============================================================
# point data
stations <- data.frame(cbind(df$long, df$lat))
colnames(stations) <- c('easting','northing')
coords <- SpatialPoints(stations)
points <- coords
proj4string(coords) <- CRS("+proj=longlat +datum=WGS84")
coords <- spTransform(coords, CRS("+proj=utm +zone=12 +datum=WGS84"))
coords <- data.frame(coords@coords)
coords <- cbind(coords$easting, coords$northing)
class(coords)
coords_lst = list(coords)
class(coords_lst)
plot(variogram(list(rowMeans(traf_matrix)), locations=coords_lst))
# examine in different directions
plot(variogram(list(rowMeans(traf_matrix)), locations=coords_lst, alpha=c(0,45,90,135)))
# https://spatialanalysis.github.io/lab_tutorials/Distance_Based_Spatial_Weights.html#distance-band-weights
library(tmap)
library(sf)
library(spdep)
library(ggplot2)
library(deldir)
library(sp)
library(purrr)
library(rgdal)
library(maptools)
library(knitr)
# ===============================================================
# Load data
# ===============================================================
current_directory <- getwd()
setwd(current_directory)
df <- read.table('Data/C_Utah_Traffic.csv', header = TRUE, sep = ",")
# ===============================================================
# building weight matrix by distanceband/KNN
# ===============================================================
stations <- data.frame(cbind(df$long, df$lat))
colnames(stations) <- c('easting','northing')
coords <- SpatialPoints(stations)
points <- coords
# check for duplicates
# duplicates <- duplicated(stations$easting)
# stations[duplicates,]
proj4string(coords) <- CRS("+proj=longlat +datum=WGS84")
coords <- spTransform(coords, CRS("+proj=utm +zone=12 +datum=WGS84"))
coords <- data.frame(coords@coords)
coords <- cbind(coords$easting, coords$northing)
# duplicates <- duplicated(coords)
# coords[duplicates,]
coords <- as.matrix(coords)
class(coords)
# ===============================================================
# show points on map
# ===============================================================
tmap_mode("view")
tm_shape(points) + tm_dots()
tmap_mode('plot')
# ===============================================================
tmap_mode("view")
tm_shape(points) + tm_dots(size=0.5, shape="triangle")
tm_shape(points) + tm_dots(size=0.5)
tm_shape(points) + tm_dots(size=0.3)
tmap_mode('plot')
tm_shape(points) + tm_dots(size=0.1)
# ===============================================================
# show points on map
# ===============================================================
tmap_mode("view")
tm_shape(points) + tm_dots(size=0.1)
tmap_mode("view")
tm_shape(points) + tm_dots(size=0.1, col="orange")
tmap_mode('plot')
tm_shape(points) + tm_dots(size=0.1, col="red")
# ===============================================================
# show points on map
# ===============================================================
tmap_mode("view")
tm_shape(points) + tm_dots(size=0.1, col="red")
tmap_mode('plot')
# ===============================================================
# show points on map
# ===============================================================
tmap_mode("view")
tm_shape(points) + tm_dots(size=0.1, col="red")
tmap_mode('plot')
# ===============================================================
# Weight Matrix by Distance Band
# adapted from https://spatialanalysis.github.io/lab_tutorials/Distance_Based_Spatial_Weights.html#distance-band-weights
# ===============================================================
# computing critical threshold
knn1 <- knearneigh(coords)
# view knn results
str(knn1)
k1 <- knn2nb(knn1)
# computing critical threshold
critical.threshold <- max(unlist(nbdists(k1, coords)))
critical.threshold
# computing distance-band weights
nb.dist.band <- dnearneigh(coords, 0, critical.threshold)
nb.dist.band <- dnearneigh(coords, 0, critical.threshold+3000)
summary(nb.dist.band)
# plot connectivity histogram
dist.band.card <- card(nb.dist.band)
dist.band.card
ggplot() +
geom_histogram(aes(x=dist.band.card)) +
xlab("Number of Neighbors")
# plot connectivity graph
plot(nb.dist.band, coords, lwd=.2, col="blue", cex = .5)
tmap_mode("view")
tm_shape(points)
library(maptools)
library(lattice)
library(spdep)
library(sp)
library(rgdal)
library(tmap)
library(ggplot2)
library(gridExtra)
library(gstat)
library(OpenStreetMap)
library(spacetime)
library(tmap)
current_directory <- getwd()
setwd(current_directory)
df <- read.csv('Data/C_Utah_Traffic.csv')
stations <- tm_shape(stations)
traf_matrix <- data.matrix(df[,5:ncol(df)])
# ==============================================================
# TEMPORAL AUTO CORRELATION
# ==============================================================
# examine the lagged variables
meanTraf <- colMeans(df[,5:(ncol(df))])
hours <- seq(from = as.POSIXct("2022-01-01 00:00"),
to = as.POSIXct("2022-01-31 22:00"),
by = "hour")
TrafLagged <- data.frame(hours, t=meanTraf[2:(length(meanTraf))], t_minus_1=meanTraf[1:(length(meanTraf)-1)])
p1 <- ggplot(TrafLagged, aes(x=hours, y=t)) + geom_line()
p2 <- ggplot(TrafLagged, aes(x=t, y=t_minus_1)) +
geom_point() +
labs(y="t-1") +
geom_smooth(method="lm")+ # Add a regression line to the plot
ggplot2::annotate("text", 8.5, 10, label=paste("r =", round(cor(TrafLagged$t, TrafLagged$t_minus_1), 3))) # Calculate PMCC
grid.arrange(p1,p2, nrow=1)
# ==============================================================
# calculate over higher lags -- plot an ACF
# ==============================================================
acf(meanTraf, lag.max = 48)
acf(traf_matrix[1,], lag.max=48, main="ACF, station no.354")
library(maptools)
library(lattice)
library(spdep)
library(sp)
library(rgdal)
library(tmap)
library(ggplot2)
library(gridExtra)
library(gstat)
library(OpenStreetMap)
library(spacetime)
library(tmap)
current_directory <- getwd()
setwd(current_directory)
df <- read.csv('Data/C_Utah_Traffic.csv')
stations <- tm_shape(stations)
traf_matrix <- data.matrix(df[,5:ncol(df)])
# ==============================================================
# TEMPORAL AUTO CORRELATION
# ==============================================================
# examine the lagged variables
meanTraf <- colMeans(df[,5:(ncol(df))])
hours <- seq(from = as.POSIXct("2022-01-01 00:00"),
to = as.POSIXct("2022-01-31 22:00"),
by = "hour")
# hours_label <- as.character(hours)
# hours_label <- substr(hours_label, start=6, stop=13)
TrafLagged <- data.frame(hours, t=meanTraf[24:(length(meanTraf))], t_minus_1=meanTraf[24:(length(meanTraf)-24)])
TrafLagged <- data.frame(hours, t=meanTraf[1:(length(meanTraf))], t_minus_1=meanTraf[1:(length(meanTraf)-1)])
TrafLagged <- data.frame(hours, t=meanTraf[25:(length(meanTraf))], t_minus_1=meanTraf[1:(length(meanTraf)-24)])
TrafLagged <- data.frame(hours, t=meanTraf[3:(length(meanTraf))], t_minus_1=meanTraf[1:(length(meanTraf)-2)])
TrafLagged <- data.frame(hours, t=meanTraf[4:(length(meanTraf))], t_minus_1=meanTraf[1:(length(meanTraf)-2)])
TrafLagged <- data.frame(hours, t=meanTraf[2:(length(meanTraf))], t_minus_1=meanTraf[1:(length(meanTraf)-2)])
TrafLagged <- data.frame(hours, t=meanTraf[3:(length(meanTraf))], t_minus_1=meanTraf[1:(length(meanTraf)-2)])
TrafLagged <- data.frame(hours, t=meanTraf[1:(length(meanTraf))], t_minus_1=meanTraf[1:(length(meanTraf)-1)])
TrafLagged <- data.frame(hours, t=meanTraf[3:(length(meanTraf))], t_minus_1=meanTraf[1:(length(meanTraf)-2)])
TrafLagged <- data.frame(hours, t=meanTraf[2:(length(meanTraf))], t_minus_1=meanTraf[1:(length(meanTraf)-1)])
p1 <- ggplot(TrafLagged, aes(x=hours, y=t)) + geom_line()
p2 <- ggplot(TrafLagged, aes(x=t, y=t_minus_1)) +
geom_point() +
labs(y="t-1") +
geom_smooth(method="lm")+ # Add a regression line to the plot
ggplot2::annotate("text", 8.5, 10, label=paste("r =", round(cor(TrafLagged$t, TrafLagged$t_minus_1), 3))) # Calculate PMCC
grid.arrange(p1,p2, nrow=1)
# ==============================================================
# calculate over higher lags -- plot an ACF
# ==============================================================
acf(meanTraf, lag.max = 48)
p2 <- ggplot(TrafLagged, aes(x=t, y=t_minus_1)) +
geom_point() +
labs(y="t-1") +
geom_smooth(method="lm")+ # Add a regression line to the plot
ggplot2::annotate("text", 8.5, 10, label=paste("r =", round(cor(TrafLagged$t, TrafLagged$t_minus_1), 3))) # Calculate PMCC
library(maptools)
library(lattice)
library(spdep)
library(sp)
library(rgdal)
library(tmap)
library(ggplot2)
library(gridExtra)
library(gstat)
library(OpenStreetMap)
library(spacetime)
library(tmap)
current_directory <- getwd()
setwd(current_directory)
df <- read.csv('Data/C_Utah_Traffic.csv')
stations <- tm_shape(stations)
traf_matrix <- data.matrix(df[,5:ncol(df)])
# ==============================================================
# TEMPORAL AUTO CORRELATION
# ==============================================================
# examine the lagged variables
meanTraf <- colMeans(df[,5:(ncol(df))])
hours <- seq(from = as.POSIXct("2022-01-01 00:00"),
to = as.POSIXct("2022-01-31 22:00"),
by = "hour")
# hours_label <- as.character(hours)
# hours_label <- substr(hours_label, start=6, stop=13)
TrafLagged <- data.frame(hours, t=meanTraf[2:(length(meanTraf))], t_minus_1=meanTraf[1:(length(meanTraf)-1)])
p1 <- ggplot(TrafLagged, aes(x=hours, y=t)) + geom_line()
p2 <- ggplot(TrafLagged, aes(x=t, y=t_minus_1)) +
geom_point() +
labs(y="t-1") +
geom_smooth(method="lm")+ # Add a regression line to the plot
ggplot2::annotate("text", 8.5, 10, label=paste("r =", round(cor(TrafLagged$t, TrafLagged$t_minus_1), 3))) # Calculate PMCC
grid.arrange(p1,p2, nrow=1)
# ==============================================================
# calculate over higher lags -- plot an ACF
# ==============================================================
acf(meanTraf, lag.max = 48)
# ==============================================================
# calculate over higher lags -- plot an ACF
# ==============================================================
acf(meanTraf, lag.max = 48, main="ACF, all stations averaged")
meanTraf
# the smaller the lag, the greater the correlation
# however negative correlation during night-time
meanTraf_mat <- t(as.matrix(meanTraf))
acf(meanTraf_mat, lag.max = 48, main="ACF, all stations averaged daily average")
meanTraf_mat
View(meanTraf_mat)
acf(colMeans(matrix(meanTraf_mat,24)), lag.max = 48, main="ACF, all stations averaged daily average")
acf(colMeans(matrix(meanTraf_mat,168)), lag.max = 48, main="ACF, all stations averaged daily average")
acf(colMeans(matrix(meanTraf_mat,24)), lag.max = 48, main="ACF, all stations averaged daily average")
acf(colMeans(matrix(meanTraf_mat,168)), lag.max = 48, main="ACF, all stations averaged weekly average")
acf(traf_matrix[1,], lag.max=48, main="ACF, station no.354")
# plot seasonal (daily) patterns
acf(colMeans(matrix(traf_matrix[1,],24)), main="ACF, station no.354 daily average")
pacf(meanTraf_mat, lag.max=48, main="PACF, all stations averaged")
pacf(traf_matrix[1,], lag.max=48, main="PACF, station no.354")
pacf(colMeans(matrix(meanTraf_mat,24)), lag.max = 48, main="PACF, all stations averaged daily average")
pacf(meanTraf_mat, lag.max=48, main="PACF, all stations averaged")
# ==============================================================
# SPATIAL TEMPORAL AUTO CORRELATION
# ==============================================================
source("Packages/starima_package.R")
W <- listw2mat(W)
stacf(t(traf_matrix), W, 48)
stpacf(t(uk_temp_matrix), Wmat, 4)
meanTraf <- colMeans(df[,5:(ncol(df))])
meanTraf_mat <- t(as.matrix(meanTraf))
View(meanTraf_mat)
plot(meanTraf,
ylab="hourly overall traffic flow",
xlab="Time (in hours)",
type='l')
plot(meanTraf,
ylab="hourly overall traffic flow of study area",
xlab="Time (in hours)",
type='l')
# lag plots
lag.plot(meanTraf, lags=6, do.lines = FALSE)
# Autocorrelation analysis
acf(meanTraf,
lag.max=48,
xlab="Lag",
ylab="ACF",
main="Autocorrelation plot of hourly traffic flow")
# differenced auto correlation
EA.s.diff <- diff(meanTraf, lag=24, differences=1)
# PACF
pacf(meanTraf,
lag.max=48,
xlab="Lag",
ylab="PACF",
main="Partial Autocorrelation plot of hourly traffic flow")
pacf(meanTraf_mat, lag.max=48, main="PACF, all stations averaged")
# PACF
pacf(meanTraf,
lag.max=48,
xlab="Lag",
ylab="PACF",
main="PACF, all stations averaged")
pacf(EA.s.diff,
lag.max=48,
xlab="Lag",
ylab="ACF",
main="Partial Autocorrelation plot of hourly average traffic")
pacf(EA.s.diff,
lag.max=48,
xlab="Lag",
ylab="ACF",
main="PACF, all stations averaged, 1st diff")
pacf(EA.s.diff,
lag.max=48,
xlab="Lag",
ylab="ACF",
main="PACF, all stations averaged, 1st diff on 24 hrs lag")
# ==========================================================================================
#Parameter estimation and fitting
# ==========================================================================================
n_train <- ncol(traf_matrix) * 0.7
# ==========================================================================================
#Parameter estimation and fitting
# ==========================================================================================
n_train <- ncol(meanTraf) * 0.7
fit.ar <- arima(meanTraf,order=c(1,0,2),seasonal=list(order=c(1,1,0),period=24))
fit.ar
tsdiag(fit.ar)
pre.ar<-predict(fit.ar, n.ahead=48)
matplot(521:568,cbind(meanTraf,pre.ar$pred),type="l",main="", xlab="Hour", ylab="Average traffic flow")
pre.ar<-predict(fit.ar, n.ahead=48)
matplot(521:568,cbind(meanTraf,pre.ar$pred),type="l",main="", xlab="Hour", ylab="Average traffic flow")
pre.ar$pred
matplot(745:792,cbind(meanTraf,pre.ar$pred),type="l",main="", xlab="Hour", ylab="Average traffic flow")
matplot(521:568,cbind(meanTraf[521:568],pre.ar$pred),type="l",main="", xlab="Hour", ylab="Average traffic flow")
fit.ar <- arima(meanTraf,order=c(3,0,2),seasonal=list(order=c(1,1,0),period=24))
fit.ar
tsdiag(fit.ar)
pre.ar<-predict(fit.ar, n.ahead=48)
matplot(521:568,cbind(meanTraf[521:568],pre.ar$pred),type="l",main="", xlab="Hour", ylab="Average traffic flow")
fit.ar <- arima(meanTraf,order=c(3,0,0),seasonal=list(order=c(1,1,0),period=24))
fit.ar
tsdiag(fit.ar)
pre.ar<-predict(fit.ar, n.ahead=48)
matplot(521:568,cbind(meanTraf[521:568],pre.ar$pred),type="l",main="", xlab="Hour", ylab="Average traffic flow")
fit.ar <- arima(meanTraf,order=c(3,0,2),seasonal=list(order=c(1,1,3),period=24))
# PACF
pacf(meanTraf,
lag.max=48,
xlab="Lag",
ylab="PACF",
main="PACF, all stations averaged")
fit.ar <- arima(meanTraf,order=c(3,0,15),seasonal=list(order=c(2,1,2),period=24))
tsdiag(fit.ar)
pre.ar<-predict(fit.ar, n.ahead=48)
matplot(521:568,cbind(meanTraf[521:568],pre.ar$pred),type="l",main="", xlab="Hour", ylab="Average traffic flow")
# ==========================================================================================
# parameter tuning
# ==========================================================================================
library('tidyverse')
library('tseries')
library('forecast')
fit.Ar <- Arima(traf_matrix["354",1:n_train],order=c(1,0,2),seasonal=list(order=c(2,1,1),period=24))
pre.Ar <- Arima(traf_matrix["354",n_train:(ncol(traf_matrix))],model=fit.Ar)
